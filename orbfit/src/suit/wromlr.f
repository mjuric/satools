* Copyright (C) 1997-1998 by Mario Carpino (carpino@brera.mi.astro.it)
* Modified by Andrea Milani, vers. 1.8.3, January 1999
* ---------------------------------------------------------------------
*
*  *****************************************************************
*  *                                                               *
*  *                         W R O M L R                           *
*  *                                                               *
*  *  Writes an orbital element record in an orbital element file  *
*  *                     (multi-line format)                       *
*  *                                                               *
*  *****************************************************************
*
* OUTPUT:   UNIT      -  Output FORTRAN unit
*           NAME      -  Name of planet/asteroid/comet
*           ELEM(6)   -  Orbital element vector
*           ELTYPE    -  Type of orbital elements (KEP/EQU/CAR)
*           T0        -  Epoch of orbital elements (MJD, TDT)
*           COVE      -  Covariance matrix of orbital elements
*           DEFCOV    -  Tells whether the covariance matrix is defined
*           NORE      -  Normal matrix of orbital elements
*           DEFNOR    -  Tells whether the normal matrix is defined
*           H         -  H absolute magnitude (if <-100, missing)
*           G         -  G slope parameter
*           MASS      -  Mass (solar masses)
*
* WARNING: the routine does not write the header of the file: this
*          must be generated by calling subroutine wromlh
*
      SUBROUTINE wromlr(unit,name,elem,eltype,t0,cove,defcov,
     +                  nore,defnor,h,g,mass)
      IMPLICIT NONE

      INTEGER unit
      DOUBLE PRECISION elem(6),t0,h,g,cove(6,6),nore(6,6),mass
      CHARACTER*(*) name,eltype
      LOGICAL defcov,defnor

      INCLUDE 'trig.h'
      INCLUDE 'parcmc.h'

      INTEGER l1,ln,i,k
      DOUBLE PRECISION cnv(6),std(6)

      INTEGER lench
      EXTERNAL lench
c eigenvalues, eigenvectors
      DOUBLE PRECISION eigvec(6,6),eigval(6),fv1(6),fv2(6)
      INTEGER ierr
* Name
      ln=lench(name)
      IF(ln.LE.0) THEN
          name='????'
          ln=4
      END IF
      l1=1
      IF(name(l1:l1).EQ.' ') THEN
          DO 1 l1=1,ln
          IF(name(l1:l1).NE.' ') GOTO 2
 1        CONTINUE
 2        CONTINUE
          IF(l1.GT.ln) THEN
              name='????'
              ln=4
          END IF
      END IF
      WRITE(unit,100) name(l1:ln)
 100  FORMAT(A)

* Orbital elements
      DO 3 i=1,6
      cnv(i)=1
 3    CONTINUE
      IF(eltype.EQ.'KEP') THEN
          DO 4 i=3,6
          cnv(i)=degrad
 4        CONTINUE
          if(elem(6).lt.0.d0)elem(6)=elem(6)+dpig
          if(elem(5).lt.0.d0)elem(5)=elem(5)+dpig
          if(elem(4).lt.0.d0)elem(4)=elem(4)+dpig
          WRITE(unit,201) comcha
          WRITE(unit,101) (elem(i)*cnv(i),i=1,6)
      ELSEIF(eltype.EQ.'CAR') THEN
          WRITE(unit,202) comcha
          WRITE(unit,102) elem
      ELSEIF(eltype.EQ.'EQU') THEN
          cnv(6)=degrad
          IF(elem(6).lt.0.d0)THEN
             WRITE(*,*) ' wromlr: negative mean anomaly', elem(6)*cnv(6)
             elem(6)=elem(6)+dpig
          ENDIF
          WRITE(unit,203) comcha
          WRITE(unit,103) (elem(i)*cnv(i),i=1,6)
      ELSE
          STOP '**** wromlr: unsupported orbital element type ****'
      END IF
 101  FORMAT(' KEP ',1P,E22.14,0P,F18.15,4F18.13)
 102  FORMAT(' CAR ',1P,6E22.14)
 103  FORMAT(' EQU ',1P,E22.14,0P,4F19.15,F18.13)
 201  FORMAT(A,' Keplerian elements: a, e, i, long. node,',
     +         ' arg. peric., mean anomaly')
 202  FORMAT(A,' Cartesian position and velocity vectors')
 203  FORMAT(A,' Equinoctial elements: a, e*sin(LP), e*cos(LP),',
     +         ' tan(i/2)*sin(LN), tan(i/2)*cos(LN), mean long.')

* Epoch
      WRITE(unit,104) t0
 104  FORMAT(' MJD ',F18.8,' TDT')

* Mass
      IF(mass.NE.0.d0) WRITE(unit,105) mass
 105  FORMAT(' MAS ',1P,E20.12)

* Magnitudes
      IF(h.GT.-100.d0) WRITE(unit,106) h,g
 106  FORMAT(' MAG ',2F7.3)

* Covariance matrix
      IF(defcov) THEN
          DO 5 i=1,6
          std(i)=SQRT(cove(i,i))
 5        CONTINUE
c eigenvalues
          CALL rs(6,6,cove,eigval,1,eigvec,fv1,fv2,ierr)

          DO i=1,6
            IF(eigval(i).gt.0.d0)THEN
               eigval(i)=sqrt(eigval(i))
            ELSE
               WRITE(*,*)'wromlr: zero/negative eigenvalue', eigval(i)
               WRITE(*,*) '  for asteroid ',name(l1:ln)
               eigval(i)=-sqrt(-eigval(i))
            ENDIF
          ENDDO
c RMS, eigenvalues and weak direction are so far commented
          WRITE(unit,107) comcha,(std(i)*cnv(i),i=1,6)
 107      FORMAT(A1,' RMS ',1P,6E14.5)
          WRITE(unit,111) comcha,eigval
 111      FORMAT(A1,' EIG',1P,6E14.5)
          WRITE(unit,110) comcha,(eigvec(i,6),i=1,6)
 110      FORMAT(A1,' WEA',6F10.5)
c covariance matrix is given uncommented, to be readable
          WRITE(unit,108) ((cove(i,k)*cnv(i)*cnv(k),k=i,6),i=1,6)
 108      FORMAT(' COV ',1P,3E23.15)
      END IF

* Normal matrix
      IF(defnor) THEN
          WRITE(unit,109) ((nore(i,k)/(cnv(i)*cnv(k)),k=i,6),i=1,6)
      END IF
 109  FORMAT(' NOR ',1P,3E23.15)

      END



